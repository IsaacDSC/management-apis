// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
)

const createOrUpdate = `-- name: CreateOrUpdate :exec
INSERT INTO endpoints (service_name, name, description, method, url, path, headers, body, sensitive_api, active) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT (name) DO UPDATE SET service_name = $1, description = $3, method = $4, url = $5, path =  $6, headers = $7, body = $8, sensitive_api = $9, active = $10
`

type CreateOrUpdateParams struct {
	ServiceName  string
	Name         string
	Description  string
	Method       string
	Url          string
	Path         string
	Headers      string
	Body         string
	SensitiveApi bool
	Active       bool
}

func (q *Queries) CreateOrUpdate(ctx context.Context, arg CreateOrUpdateParams) error {
	_, err := q.db.ExecContext(ctx, createOrUpdate,
		arg.ServiceName,
		arg.Name,
		arg.Description,
		arg.Method,
		arg.Url,
		arg.Path,
		arg.Headers,
		arg.Body,
		arg.SensitiveApi,
		arg.Active,
	)
	return err
}

const getAllEndpoints = `-- name: GetAllEndpoints :many
SELECT id, service_name, name, description, method, url, path, headers, body, sensitive_api, active, deleted_at, created_at, updated_at FROM endpoints WHERE deleted_at IS NULL order by created_at desc
`

func (q *Queries) GetAllEndpoints(ctx context.Context) ([]Endpoint, error) {
	rows, err := q.db.QueryContext(ctx, getAllEndpoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Endpoint
	for rows.Next() {
		var i Endpoint
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Name,
			&i.Description,
			&i.Method,
			&i.Url,
			&i.Path,
			&i.Headers,
			&i.Body,
			&i.SensitiveApi,
			&i.Active,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEndpoint = `-- name: GetEndpoint :one
SELECT id, service_name, name, description, method, url, path, headers, body, sensitive_api, active, deleted_at, created_at, updated_at FROM endpoints WHERE name = $1 and deleted_at IS NULL
`

func (q *Queries) GetEndpoint(ctx context.Context, name string) (Endpoint, error) {
	row := q.db.QueryRowContext(ctx, getEndpoint, name)
	var i Endpoint
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.Name,
		&i.Description,
		&i.Method,
		&i.Url,
		&i.Path,
		&i.Headers,
		&i.Body,
		&i.SensitiveApi,
		&i.Active,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEndpoints = `-- name: GetEndpoints :many
SELECT id, service_name, name, description, method, url, path, headers, body, sensitive_api, active, deleted_at, created_at, updated_at FROM endpoints WHERE "service_name" = $1 and deleted_at IS NULL order by created_at desc
`

func (q *Queries) GetEndpoints(ctx context.Context, serviceName string) ([]Endpoint, error) {
	rows, err := q.db.QueryContext(ctx, getEndpoints, serviceName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Endpoint
	for rows.Next() {
		var i Endpoint
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Name,
			&i.Description,
			&i.Method,
			&i.Url,
			&i.Path,
			&i.Headers,
			&i.Body,
			&i.SensitiveApi,
			&i.Active,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServices = `-- name: GetServices :many
SELECT DISTINCT(service_name) FROM endpoints WHERE deleted_at IS NULL
`

func (q *Queries) GetServices(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var service_name string
		if err := rows.Scan(&service_name); err != nil {
			return nil, err
		}
		items = append(items, service_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeEndpoint = `-- name: RemoveEndpoint :exec
UPDATE endpoints SET active = false, deleted_at = CURRENT_TIMESTAMP WHERE name = $1
`

func (q *Queries) RemoveEndpoint(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, removeEndpoint, name)
	return err
}

const removeService = `-- name: RemoveService :exec
UPDATE endpoints SET active = false, deleted_at = CURRENT_TIMESTAMP WHERE service_name = $1
`

func (q *Queries) RemoveService(ctx context.Context, serviceName string) error {
	_, err := q.db.ExecContext(ctx, removeService, serviceName)
	return err
}
