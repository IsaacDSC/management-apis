// Code generated by MockGen. DO NOT EDIT.
// Source: internal/management/adapter/management_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "bff/internal/management/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManagementAdapterRepository is a mock of ManagementAdapterRepository interface.
type MockManagementAdapterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAdapterRepositoryMockRecorder
}

// MockManagementAdapterRepositoryMockRecorder is the mock recorder for MockManagementAdapterRepository.
type MockManagementAdapterRepositoryMockRecorder struct {
	mock *MockManagementAdapterRepository
}

// NewMockManagementAdapterRepository creates a new mock instance.
func NewMockManagementAdapterRepository(ctrl *gomock.Controller) *MockManagementAdapterRepository {
	mock := &MockManagementAdapterRepository{ctrl: ctrl}
	mock.recorder = &MockManagementAdapterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAdapterRepository) EXPECT() *MockManagementAdapterRepositoryMockRecorder {
	return m.recorder
}

// GetEndpoints mocks base method.
func (m *MockManagementAdapterRepository) GetEndpoints(ctx context.Context, serviceName string) (domain.API, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints", ctx, serviceName)
	ret0, _ := ret[0].(domain.API)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockManagementAdapterRepositoryMockRecorder) GetEndpoints(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockManagementAdapterRepository)(nil).GetEndpoints), ctx, serviceName)
}

// GetServices mocks base method.
func (m *MockManagementAdapterRepository) GetServices(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockManagementAdapterRepositoryMockRecorder) GetServices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockManagementAdapterRepository)(nil).GetServices), ctx)
}

// RemoveEndpoint mocks base method.
func (m *MockManagementAdapterRepository) RemoveEndpoint(ctx context.Context, endpointName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEndpoint", ctx, endpointName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEndpoint indicates an expected call of RemoveEndpoint.
func (mr *MockManagementAdapterRepositoryMockRecorder) RemoveEndpoint(ctx, endpointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEndpoint", reflect.TypeOf((*MockManagementAdapterRepository)(nil).RemoveEndpoint), ctx, endpointName)
}

// RemoveService mocks base method.
func (m *MockManagementAdapterRepository) RemoveService(ctx context.Context, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", ctx, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockManagementAdapterRepositoryMockRecorder) RemoveService(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockManagementAdapterRepository)(nil).RemoveService), ctx, serviceName)
}

// Save mocks base method.
func (m *MockManagementAdapterRepository) Save(ctx context.Context, api domain.API) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, api)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockManagementAdapterRepositoryMockRecorder) Save(ctx, api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockManagementAdapterRepository)(nil).Save), ctx, api)
}
