// Code generated by MockGen. DO NOT EDIT.
// Source: internal/management/adapter/save_api_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "bff/internal/management/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceAdapter is a mock of ManagementService interface.
type MockServiceAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAdapterMockRecorder
}

// MockServiceAdapterMockRecorder is the mock recorder for MockServiceAdapter.
type MockServiceAdapterMockRecorder struct {
	mock *MockServiceAdapter
}

// NewMockServiceAdapter creates a new mock instance.
func NewMockServiceAdapter(ctrl *gomock.Controller) *MockServiceAdapter {
	mock := &MockServiceAdapter{ctrl: ctrl}
	mock.recorder = &MockServiceAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAdapter) EXPECT() *MockServiceAdapterMockRecorder {
	return m.recorder
}

// GetEndpoints mocks base method.
func (m *MockServiceAdapter) GetEndpoints(ctx context.Context, serviceName string) (domain.API, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints", ctx, serviceName)
	ret0, _ := ret[0].(domain.API)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockServiceAdapterMockRecorder) GetEndpoints(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockServiceAdapter)(nil).GetEndpoints), ctx, serviceName)
}

// GetServices mocks base method.
func (m *MockServiceAdapter) GetServices(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServices", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServices indicates an expected call of GetServices.
func (mr *MockServiceAdapterMockRecorder) GetServices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockServiceAdapter)(nil).GetServices), ctx)
}

// RegistryApi mocks base method.
func (m *MockServiceAdapter) RegistryApi(ctx context.Context, api domain.API) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryApi", ctx, api)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistryApi indicates an expected call of RegistryApi.
func (mr *MockServiceAdapterMockRecorder) RegistryApi(ctx, api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryApi", reflect.TypeOf((*MockServiceAdapter)(nil).RegistryApi), ctx, api)
}

// RemoveEndpoint mocks base method.
func (m *MockServiceAdapter) RemoveEndpoint(ctx context.Context, endpointName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEndpoint", ctx, endpointName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEndpoint indicates an expected call of RemoveEndpoint.
func (mr *MockServiceAdapterMockRecorder) RemoveEndpoint(ctx, endpointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEndpoint", reflect.TypeOf((*MockServiceAdapter)(nil).RemoveEndpoint), ctx, endpointName)
}

// RemoveService mocks base method.
func (m *MockServiceAdapter) RemoveService(ctx context.Context, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", ctx, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockServiceAdapterMockRecorder) RemoveService(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockServiceAdapter)(nil).RemoveService), ctx, serviceName)
}
